[ User ] → Internet → [ DNS resolves www.foobar.com → 8.8.8.8 ]

                                ↓
                      ┌──────────────────────────────┐
                     │      LOAD BALANCER (LB)       │ (IP: 8.8.8.8)
                     │         SSL Termination       │
                     │         Firewall              │
                     │         Monitoring Agent      │
                     │          ( SumoLogic )        │
                     │      HAProxy (HTTPS enabled)  │
                     └────────────┬──────────────────┘
                                  │
              ┌──────────────────┴──────────────────┐
              │                                     │
   ┌──────────────────────────────┐    ┌──────────────────────────────┐
   │          SERVER 1            │    │          SERVER 2            │
   │         Firewall             │    │         Firewall             │
   │   Nginx Web Server (HTTPS)   │    │   Nginx Web Server (HTTPS)   │
   │   App Server (PHP/Python)    │    │   App Server (PHP/Python)    │
   │   MySQL (Primary DB - Write) │    │   MySQL (Replica - Read)     │
   │      Monitoring Agent        │    │     Monitoring Agent         │
   └──────────────────────────────┘    └──────────────────────────────┘

Specifics added to this infrastructure:

Firewalls: Here to prevent unauthorized access and Minimize exposure to attacks

SSL certificate HTTPS: Here to Encrypt communication between users and the server, Protects login credentials ( cookies, API calls )

Monitoring: Helps detect downtime, resource exhaustion (high memory/CPU), Slow responses and anomalies. And Enables alerting and dashboards for system health and view query per second (QPS)

Why is the traffic served over HTTPS: HTTPS encrypts the data transmitted between the client (user) and the server, HTTPS ensures that no one can eavesdrop on sensitive information our web app handles sensitive information (such as login credentials, personal data, or payment information)

Explain what to do if you want to monitor your web server QPS: Set up the monitoring tool SumoLogic and configure it to keep track of QPS, set up rules to alert if abnormalities, example: High rate of QPS, finally vizualise the QPS to keep track of it in a Dashboard.


Issues with this infrastructure:

Terminating SSL at the Load Balancer Level: 

Terminating SSL at the load balancer can be an issue, when SSL termination happens at the load balancer level, the load balancer decrypts the incoming traffic before passing it to the backend servers. This means that the traffic is encrypted only between the client and the load balancer, not from the load balancer to the backend web servers.

Having Only One MySQL Server Capable of Accepting Writes: 

If your single write-capable MySQL server goes down, no writes can be processed. This creates a critical single point of failure in the infrastructure.
During database failure or maintenance, the app could face downtime because there is no backup server to handle write requests.
If the master server fails and recent write operations haven’t yet been replicated to a secondary server, data loss could occur.
If traffic increases, the MySQL server might become overwhelmed with write operations, leading to slower performance or even timeouts.

Having Servers with All the Same Components: 

Mixing all the components on a single server creates a lack of component isolation, meaning that each component could impact the performance or stability of the others.
A server running multiple components (web, application, and database) is difficult to scale. If any one of the components becomes a problem, we will be forced to scale the entire server instead of just scaling the specific component that needs more resources.
When all components are combined, updates and maintenance tasks for each component might interfere with each other.
